const OpenAI = require('openai');
const fs = require('fs');

// OpenAI 클라이언트 초기화
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

/**
 * ChatGPT 5 Thinking을 사용하여 얼굴 이미지 분석
 * @param {string} imagePath - 분석할 이미지 파일 경로
 * @returns {Promise<Object>} 분석 결과
 */
async function analyzeFaceWithChatGPT5(imagePath) {
    try {
        // 이미지 파일을 base64로 인코딩
        const imageBuffer = fs.readFileSync(imagePath);
        const base64Image = imageBuffer.toString('base64');

        // ChatGPT 5 Thinking API 요청을 위한 프롬프트 (두 단계로 분리)
        const systemPrompt = `이제부터 너가 퍼스널 브랜딩 상담 실장이야. 고객이 자신의 외모를 분석해주기를 원하고 있어. 너가 아주 구체적이고 객관적으로 현재 외모 상태를 분석해줘. 구체적인 답변 형식은 아래와 같아.

- 얼굴형 : 고객의 얼굴형이 달걀형, 둥근형, 땅콩형, 마름모형, 하트형, 육각형 중에 어느 얼굴형에 속하는지 알려줘. 그리고 얼굴 길이가 긴지 짧은지도 알려줘. 즉, 긴 달걀형, 짧은 마름모형 처럼 알려주면 돼.
- 얼굴 비율 : 상안부, 중안부, 하안부의 비율을 분석해줘.
- 피부 상태 : 여드름, 흉터, 모공크기, 유분기, 피부 색감 등을 분석해서 피부 상태를 정밀하게 분석해줘.
- 눈 : 고객의 눈이 쌍커풀이 있는지 없는지, 눈동자의 크기가 큰지 작은지, 앞이 트여져있는지 막혀있는지, 눈꼬리가 올라가 있는지 내려가 있는지, 눈 뒤가 막혀있는지 트여있는지를 정밀하게 분석해서 눈 모양을 진단해줘. 그리고 눈과 눈 사이가 전체적인 얼굴 비율에 비해 가까운지 먼지도 알려줘
- 코 : 코 길이가 긴지 짧은지, 코 너비가 어떤지, 콧망울과 콧볼의 비율이 어떤지 크기가 어떤지 등을 분석해줘.
- 입 : 입술의 모양과 비율이 얼굴 전체 비율에 비해 조화로운지 짧은지 작은지 도톰한지 긴지, 큰지 알려주면 돼.
- 결론 : 결론적으로 해당 얼굴이 우아함, 귀여움, 도도함, 차분함, 시크함 등등의 분위기중에 어떤 분위기를 자아내는 얼굴인지 너가 분석한 내용을 토대로 근거를 제시하면서 이야기해줘.

마지막에 반드시 "포인트: [등급]" 형식으로 등급을 명시해줘. 
A+는 극소수의 완벽한 조화와 비율, 피부 상태, 대중적/국제적 미 기준 모두 충족하는 수준입니다.
A는 매우 뛰어난 수준, A-는 상위권이나 약간의 개선 여지가 있는 경우입니다.
B대는 평균 이상, C대는 평균 이하, D는 기준 대비 조화나 비율에서 크게 벗어나는 경우입니다.

예를 들어 차은우는 S+ 포인트를 받게 돼`;

                // 여러 모델을 시도하는 함수
        async function tryModel(modelName) {
            try {
                console.log(`모델 ${modelName} 시도 중...`);
                // 모델별 파라미터 설정
                const params = {
                    model: modelName,
                    messages: [
                        {
                            role: "system",
                            content: systemPrompt
                        },
                        {
                            role: "user",
                            content: [
                                {
                                    type: "text",
                                    text: "그럼 이 이미지를 앞서 말한 규칙대로 분석해줘"
                                },
                                {
                                    type: "image_url",
                                    image_url: {
                                        url: `data:image/jpeg;base64,${base64Image}`,
                                        detail: "high"
                                    }
                                }
                            ]
                        }
                    ]
                };

                // gpt-5 모델은 max_completion_tokens만, 다른 모델은 temperature와 max_tokens 사용
                if (modelName === "gpt-5") {
                    // gpt-5는 max_completion_tokens 파라미터 지원 안함
                    // gpt-5는 temperature 파라미터 지원 안함
                    // gpt-5에서는 max_tokens 파라미터를 설정하지 않음
                } else {
                    params.temperature = 0.7;
                    params.max_tokens = 4000; // gpt-4 모델들의 제한에 맞춤
                }

                const response = await openai.chat.completions.create(params);

                const content = response.choices[0]?.message?.content;
                // 더 유연한 거부 감지 (JSON 형식이 아니어도 분석 내용이 있으면 성공으로 간주)
                if (content && 
                    !content.includes("I'm sorry") && 
                    !content.includes("can't assist") &&
                    !content.includes("I'm unable") &&
                    !content.includes("unable to analyze") &&
                    !content.includes("죄송하지만") &&
                    !content.includes("분석할 수 없습니다") &&
                    content.length > 50) {  // 최소 50자 이상의 내용이 있어야 함
                    console.log(`모델 ${modelName} 성공!`);
                    return response;
                } else {
                    console.log(`모델 ${modelName} 거부됨:`, content);
                    return null;
                }
            } catch (error) {
                console.log(`모델 ${modelName} 오류:`, error.message);
                // API 할당량 초과 에러는 다시 던지기
                if (error.message.includes('429') || error.message.includes('quota')) {
                    throw error;
                }
                return null;
            }
        }

        // 모델들을 순서대로 시도 (ChatGPT 5 모델 우선, gpt-4o 제거)
        const models = ["gpt-5", "gpt-4-turbo"];
        let response = null;
        let quotaExceeded = false;
        
        for (const model of models) {
            try {
                response = await tryModel(model);
                if (response) break;
            } catch (error) {
                // API 할당량 초과 에러 확인
                if (error.message.includes('429') || error.message.includes('quota')) {
                    quotaExceeded = true;
                    console.log(`모델 ${model} 할당량 초과:`, error.message);
                }
            }
        }
        
        if (!response) {
            if (quotaExceeded) {
                console.log('API 할당량이 초과되었습니다.');
                throw new Error('API 할당량이 초과되었습니다. OpenAI 계정의 결제 정보를 확인해주세요.');
            } else {
                console.log('모든 모델이 거부됨. AI 거부 응답 생성...');
                // AI 거부 응답 생성
                const refusalResponse = {
                    choices: [{
                        message: {
                            content: JSON.stringify({
                                error: "ai_refusal",
                                reason: "모든 AI 모델이 이미지 분석을 거부했습니다",
                                details: {
                                    reason: "이미지 품질이 낮거나 AI 모델 정책상 분석할 수 없습니다",
                                    suggestions: [
                                        "더 명확한 얼굴 사진을 업로드해주세요",
                                        "선글라스나 모자 등 가림이 없는 사진을 사용해주세요",
                                        "밝은 조명에서 정면을 향한 사진을 촬영해주세요"
                                    ]
                                }
                            })
                        }
                    }]
                };
                response = refusalResponse;
            }
        }

        // 응답 구조 디버깅
        console.log('GPT-4o 응답 전체:', JSON.stringify(response, null, 2));
        console.log('response.choices:', response.choices);
        console.log('response.choices[0]:', response.choices[0]);
        
        // 응답에서 분석 결과 추출
        const analysisText = response.choices[0]?.message?.content;
        
        if (!analysisText) {
            console.log('GPT-4o 응답이 null입니다. 응답 구조:', response);
            throw new Error('GPT-4o가 응답하지 않았습니다.');
        }
        
        // AI 거부 응답인지 먼저 확인
        if (analysisText.includes('I\'m sorry') || 
            analysisText.includes('can\'t assist') ||
            analysisText.includes('I\'m unable') ||
            analysisText.includes('unable to analyze')) {
            
            console.log('AI가 이미지 분석을 거부했습니다.');
            return {
                error: "ai_refusal",
                reason: "AI 모델이 이미지 분석을 거부했습니다",
                details: {
                    reason: "이미지 품질이 낮거나 AI 모델 정책상 분석할 수 없습니다",
                    suggestions: [
                        "더 명확한 얼굴 사진을 업로드해주세요",
                        "선글라스나 모자 등 가림이 없는 사진을 사용해주세요",
                        "밝은 조명에서 정면을 향한 사진을 촬영해주세요"
                    ]
                }
            };
        }
        
        // AI 응답을 자연어 그대로 사용
        let analysisResult = {
            raw_analysis: analysisText,
            parsed: false
        };
        
        console.log('AI 응답을 자연어로 처리:', analysisText);

        return analysisResult;

    } catch (error) {
        console.error('GPT-4o API 호출 오류:', error);
        throw new Error(`GPT-4o 분석 중 오류가 발생했습니다: ${error.message}`);
    }
}

/**
 * 분석 결과를 프론트엔드에서 사용할 수 있는 형태로 변환
 * @param {Object} rawAnalysis - GPT-4o에서 받은 원본 분석 결과
 * @returns {Object} 변환된 분석 결과
 */
function formatAnalysisResult(rawAnalysis) {
    // AI가 자연어로 응답한 경우 그대로 사용
    if (rawAnalysis.raw_analysis) {
        return {
            analysis: rawAnalysis.raw_analysis,
            timestamp: new Date().toISOString()
        };
    }
    
    // 기존 구조화된 응답이 있는 경우만 처리 (하위 호환성)
    if (rawAnalysis.faceShape || rawAnalysis.얼굴형) {
        const formatted = {
            faceShape: rawAnalysis.얼굴형 || rawAnalysis.faceShape || '분석 불가',
            faceRatio: rawAnalysis.얼굴비율 || rawAnalysis.faceRatio || '분석 불가',
            skinCondition: rawAnalysis.피부상태 || rawAnalysis.skinCondition || '분석 불가',
            eyes: rawAnalysis.눈 || rawAnalysis.eyes || '분석 불가',
            nose: rawAnalysis.코 || rawAnalysis.nose || '분석 불가',
            mouth: rawAnalysis.입 || rawAnalysis.mouth || '분석 불가',
            conclusion: rawAnalysis.결론 || rawAnalysis.conclusion || '분석 불가',
            point: rawAnalysis.포인트 || rawAnalysis.point || '분석 불가',
            feedback: rawAnalysis.피드백 || rawAnalysis.feedback || '분석 불가',
            timestamp: new Date().toISOString()
        };
        return formatted;
    }
    
    // 기본 응답
    return {
        analysis: '분석 결과를 가져올 수 없습니다.',
        timestamp: new Date().toISOString()
    };
}

/**
 * 메이크업 및 시술 팁을 가져오는 함수
 * @param {string} analysisResult - 기존 외모 분석 결과
 * @returns {Object} 메이크업 팁 결과
 */
async function getMakeupTips(analysisResult) {
    try {
        console.log('메이크업 팁 요청 시작...');
        
        const makeupSystemPrompt = `이제는 너가 메이크업 실장님이야. 앞서 퍼스널브랜딩 상담 실장이 분석한 결과를 토대로 나에게 눈, 코, 입, 피부, 윤곽 화장 및 시술 팁을 알려줘. 아래의 형식으로 알려주면 돼. 참고할만한 유튜브 영상 링크를 함께 알려줘. 유튜브 영상은 최근 1년 내에 올라온 영상 중에서 추천해줘.

- 얼굴형 
- 화장법 : 무슨 톤 메이크업 베이스를 사용해서 어떤 도구들로 어떻게 피부화장 할지
- 시술 :
- 얼굴 비율
- 화장법 : 윤곽 메이크업을 어떻게 하면 좋을지
- 시술 :
- 눈
- 화장법 : 어떤 색상의 화장품으로 어떤 방식의 화장을 해야 하는지
- 시술 :
- 코
- 화장법 : 어떤 방식과 어떤 도구로 컨투어링을 해야 하는지
- 시술 :
- 입
- 화장법 : 
- 시술 :`;

        // 여러 모델을 시도하는 함수
        async function tryModel(modelName) {
            try {
                console.log(`메이크업 팁 - 모델 ${modelName} 시도 중...`);
                
                const params = {
                    model: modelName,
                    messages: [
                        {
                            role: "system",
                            content: makeupSystemPrompt
                        },
                        {
                            role: "user",
                            content: `앞서 분석한 외모 결과는 다음과 같습니다:\n\n${analysisResult}\n\n이 결과를 바탕으로 위의 형식에 맞춰 메이크업 및 시술 팁을 알려주세요.`
                        }
                    ]
                };

                // gpt-5 모델은 max_completion_tokens만, 다른 모델은 temperature와 max_tokens 사용
                if (modelName === "gpt-5") {
                    // gpt-5는 max_completion_tokens 파라미터 지원 안함
                    // gpt-5에서는 max_tokens 파라미터를 설정하지 않음
                } else {
                    params.temperature = 0.7;
                    params.max_tokens = 4000; // gpt-4 모델들의 제한에 맞춤
                }

                const response = await openai.chat.completions.create(params);
                const content = response.choices[0]?.message?.content;
                
                if (content && content.length > 50) {
                    console.log(`메이크업 팁 - 모델 ${modelName} 성공!`);
                    return response;
                } else {
                    console.log(`메이크업 팁 - 모델 ${modelName} 거부됨:`, content);
                    return null;
                }
            } catch (error) {
                console.log(`메이크업 팁 - 모델 ${modelName} 오류:`, error.message);
                return null;
            }
        }

        // 모델들을 순서대로 시도
        const models = ["gpt-5", "gpt-4-turbo"];
        let response = null;
        
        for (const model of models) {
            response = await tryModel(model);
            if (response) break;
        }
        
        if (!response) {
            console.log('메이크업 팁 - 모든 모델이 거부됨');
            return {
                error: "ai_refusal",
                reason: "AI 모델이 메이크업 팁 생성을 거부했습니다"
            };
        }

        const makeupTips = response.choices[0]?.message?.content;
        console.log('메이크업 팁 생성 완료:', makeupTips.substring(0, 100) + '...');

        return {
            raw_makeup_tips: makeupTips,
            timestamp: new Date().toISOString()
        };

    } catch (error) {
        console.error('메이크업 팁 생성 오류:', error);
        throw new Error(`메이크업 팁 생성 중 오류가 발생했습니다: ${error.message}`);
    }
}

module.exports = {
    analyzeFaceWithChatGPT5,
    formatAnalysisResult,
    getMakeupTips
};
